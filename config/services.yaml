# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Domain/*/Entity/'
            - '../src/Domain/*/ValueObject/'
            - '../src/Domain/*/Exception/'
            - '../src/Domain/*/Repository/'
            - '../src/Domain/*/Service/*/Interface.php'
            - '../src/Application/*/DTO/'
            - '../src/Application/*/Command/*/Command.php'
            - '../src/Application/*/Query/*/Query.php'

    # Command handlers should be services
    App\Application\User\Command\CreateUserHandler:
        autowire: true

    # Domain repositories (interfaces)
    App\Domain\User\Repository\UserRepositoryInterface:
        class: App\Infrastructure\Persistence\Doctrine\Repository\UserRepository

    # Authentication Success Handler - registered directly in security.yaml
    App\Infrastructure\Security\Authentication\CustomAuthenticationSuccessHandler:
        autowire: true

    # Holiday Provider
    App\Domain\Calendar\Service\HolidayProvider\HolidayProviderInterface:
        class: App\Domain\Calendar\Service\HolidayProvider\PolishHolidayProvider

    # Availability Repository
    App\Domain\WorkSchedule\Repository\AvailabilityRepository:
        arguments:
            $registry: '@doctrine'
        tags: ['doctrine.repository_service']

    App\Domain\WorkSchedule\Repository\AvailabilityRepositoryInterface:
        alias: App\Domain\WorkSchedule\Repository\AvailabilityRepository

    # Leave Request Repository
    App\Infrastructure\Persistence\Doctrine\Repository\LeaveRequestRepository:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
        tags: ['doctrine.repository_service']

    App\Domain\WorkSchedule\Repository\LeaveRequestRepositoryInterface:
        alias: App\Infrastructure\Persistence\Doctrine\Repository\LeaveRequestRepository

    # Availability Strategies
    App\Domain\WorkSchedule\Service\AvailabilityStrategy\B2BContractStrategy:
        tags: ['app.availability_strategy']

    App\Domain\WorkSchedule\Service\AvailabilityStrategy\CivilContractStrategy:
        tags: ['app.availability_strategy']

    App\Domain\WorkSchedule\Service\AvailabilityStrategy\EmploymentContractStrategy:
        tags: ['app.availability_strategy']

    # Leave Type Strategies
    App\Domain\WorkSchedule\Service\LeaveType\SickLeaveStrategy:
        tags: ['app.leave_type_strategy']

    App\Domain\WorkSchedule\Service\LeaveType\HolidayLeaveStrategy:
        tags: ['app.leave_type_strategy']

    App\Domain\WorkSchedule\Service\LeaveType\PersonalLeaveStrategy:
        tags: ['app.leave_type_strategy']

    App\Domain\WorkSchedule\Service\LeaveType\PaternityLeaveStrategy:
        tags: ['app.leave_type_strategy']

    App\Domain\WorkSchedule\Service\LeaveType\MaternityLeaveStrategy:
        tags: ['app.leave_type_strategy']

    # Leave Type Strategy Factory
    app.leave_type_strategies:
        class: Symfony\Component\DependencyInjection\Argument\TaggedIteratorArgument
        arguments: ['app.leave_type_strategy']

    app.availability_strategies:
        class: Symfony\Component\DependencyInjection\Argument\TaggedIteratorArgument
        arguments: ['app.availability_strategy']

    App\Domain\WorkSchedule\Service\LeaveType\LeaveTypeStrategyFactory:
        arguments:
            $strategies: '@app.leave_type_strategies'

    App\Controller\Api\WorkSchedule\AvailabilityController:
        arguments:
            $availabilityStrategies: '@app.availability_strategies'
            $availabilityRepository: '@App\Domain\WorkSchedule\Repository\AvailabilityRepositoryInterface'
            $validator: '@validator'
            $userRepository: '@App\Domain\User\Repository\UserRepositoryInterface'

    # LeaveRequest Controller
    App\Controller\Api\WorkSchedule\LeaveRequestController:
        arguments:
            $leaveRequestRepository: '@App\Domain\WorkSchedule\Repository\LeaveRequestRepositoryInterface'
            $validator: '@validator'
            $userRepository: '@App\Domain\User\Repository\UserRepositoryInterface'
            $leaveTypeStrategyFactory: '@App\Domain\WorkSchedule\Service\LeaveType\LeaveTypeStrategyFactory'

    # Explicitly register repositories
    App\Domain\Call\Repository\CallRepositoryInterface:
        class: App\Infrastructure\Persistence\Doctrine\Repository\CallRepository

    App\Domain\Employee\Repository\SkillRepositoryInterface:
        class: App\Infrastructure\Persistence\Doctrine\Repository\SkillRepository

    App\Domain\Employee\Repository\SkillPathRepositoryInterface:
        class: App\Infrastructure\Persistence\Doctrine\Repository\SkillPathRepository

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
